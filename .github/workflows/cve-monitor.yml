name: CVE Monitoring & Rule Generation

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - monitor
          - generate
          - stats
          - daemon
      days:
        description: 'Number of days to monitor (for monitor/full actions)'
        required: false
        default: '7'
        type: string
      platform:
        description: 'Platform for rule generation (for generate/full actions)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - sigma
          - crowdstrike
          - sentinel
          - sentinelone
  schedule:
    # Run daily monitoring at 6 AM UTC
    - cron: '0 6 * * *'
    # Run weekly monitoring on Sundays at 8 AM UTC
    - cron: '0 8 * * 0'

jobs:
  cve-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests openai sqlite3

      - name: Configure Git
        run: |
          git config --global user.name "SigmaBot"
          git config --global user.email "sigma-bot@github.com"
          git config --global core.compression 9
          git config --global http.postBuffer 524288000

      - name: Run CVE Monitoring
        id: cve-monitor
        run: |
          echo "Starting CVE monitoring..."
          echo "Action: ${{ github.event.inputs.action || 'full' }}"
          echo "Days: ${{ github.event.inputs.days || '7' }}"
          echo "Platform: ${{ github.event.inputs.platform || 'all' }}"
          
          if [ "${{ github.event.inputs.action }}" = "full" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Running FULL CVE operation (monitor + generate + stats)..."
            echo "Step 1: Monitoring CVEs..."
            python cve_monitor.py --monitor --days ${{ github.event.inputs.days || '7' }}
            echo "Step 2: Generating detection rules..."
            python cve_monitor.py --generate --platform ${{ github.event.inputs.platform || 'all' }}
            echo "Step 3: Generating statistics..."
            python cve_monitor.py --stats
            echo "full_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.action }}" = "monitor" ]; then
            echo "Running CVE monitoring..."
            python cve_monitor.py --monitor --days ${{ github.event.inputs.days || '1' }}
            echo "monitor_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.action }}" = "generate" ]; then
            echo "Generating detection rules..."
            python cve_monitor.py --generate --platform ${{ github.event.inputs.platform || 'all' }}
            echo "generate_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.action }}" = "stats" ]; then
            echo "Generating statistics..."
            python cve_monitor.py --stats
            echo "stats_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.action }}" = "daemon" ]; then
            echo "Running in daemon mode..."
            python cve_monitor.py --daemon --interval 3600
            echo "daemon_complete=true" >> $GITHUB_OUTPUT
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Commit and Push Results
        if: steps.cve-monitor.outputs.full_complete == 'true' || steps.cve-monitor.outputs.monitor_complete == 'true' || steps.cve-monitor.outputs.generate_complete == 'true'
        run: |
          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Changes detected, committing and pushing..."
            git add generated_rules/ cve_database.db
            git commit -m "Auto-update: CVE ${{ github.event.inputs.action || 'full' }} operation - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push origin master
            echo "Successfully committed and pushed changes"
          fi

      - name: Create Summary Report
        if: always()
        run: |
          echo "## CVE Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ github.event.inputs.action || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.action }}" = "full" ]; then
            echo "**Operation:** Complete CVE monitoring, rule generation, and statistics" >> $GITHUB_STEP_SUMMARY
            echo "**Days Monitored:** ${{ github.event.inputs.days || '7' }}" >> $GITHUB_STEP_SUMMARY
            echo "**Platforms:** ${{ github.event.inputs.platform || 'all' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "cve_database.db" ]; then
            echo "**Database:** ✅ Present" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Database:** ❌ Missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "generated_rules" ]; then
            echo "**Generated Rules:** ✅ Present" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Rule Counts:" >> $GITHUB_STEP_SUMMARY
            for platform in sigma crowdstrike sentinel sentinelone; do
              if [ -d "generated_rules/$platform" ]; then
                count=$(find generated_rules/$platform -name "*.yml" -o -name "*.falcon" -o -name "*.kql" -o -name "*.sql" | wc -l)
                echo "- **$platform:** $count rules" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "**Generated Rules:** ❌ Missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Database Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cve-database
          path: cve_database.db
          retention-days: 30

      - name: Upload Generated Rules Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: generated-rules
          path: generated_rules/
          retention-days: 30 