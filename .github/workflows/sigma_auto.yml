name: Sigma Rule Automation

on:
  workflow_dispatch:
    inputs:
      cve_id:
        description: 'Enter CVE ID (leave empty for auto-monitoring)'
        required: false
        default: ''
      mode:
        description: 'Operation mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - single
          - monitor
          - generate
          - stats
  schedule:
    # Run CVE monitoring daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  cve-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode != 'single')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml requests openai sqlite3

      - name: Configure Git
        run: |
          git config --global user.name "SigmaBot"
          git config --global user.email "sigma-bot@github.com"
          git config --global core.compression 9
          git config --global http.postBuffer 524288000

      - name: Run CVE Monitoring
        id: cve-monitor
        run: |
          echo "Starting CVE monitoring..."
          echo "Mode: ${{ github.event.inputs.mode || 'full' }}"
          
          if [ "${{ github.event.inputs.mode }}" = "full" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Running FULL CVE operation (monitor + generate + stats)..."
            echo "Step 1: Monitoring CVEs..."
            python cve_monitor.py --monitor --days 7
            echo "Step 2: Generating detection rules..."
            python cve_monitor.py --generate --platform all
            echo "Step 3: Generating statistics..."
            python cve_monitor.py --stats
            echo "full_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.mode }}" = "monitor" ]; then
            echo "Running CVE monitoring..."
            python cve_monitor.py --monitor --days 7
            echo "monitor_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.mode }}" = "generate" ]; then
            echo "Generating detection rules..."
            python cve_monitor.py --generate --platform all
            echo "generate_complete=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.mode }}" = "stats" ]; then
            echo "Generating statistics..."
            python cve_monitor.py --stats
            echo "stats_complete=true" >> $GITHUB_OUTPUT
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Commit and Push CVE Monitoring Results
        if: steps.cve-monitor.outputs.full_complete == 'true' || steps.cve-monitor.outputs.monitor_complete == 'true' || github.event.inputs.mode == 'monitor'
        run: |
          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Changes detected, committing and pushing..."
            git add generated_rules/ cve_database.db
            git commit -m "Auto-update: CVE ${{ github.event.inputs.mode || 'full' }} operation $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push origin master
            echo "Successfully committed and pushed changes"
          fi

  generate-single-rule:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'single' && github.event.inputs.cve_id != ''

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml requests openai

      - name: Configure Git
        run: |
          git config --global user.name "SigmaBot"
          git config --global user.email "sigma-bot@github.com"
          git config --global core.compression 9
          git config --global http.postBuffer 524288000

      - name: Run SigmaAgent (Single CVE)
        run: |
          python secrets/SigmaAgent.py --cve ${{ github.event.inputs.cve_id }} --auto-submit --config secrets/sigma_config.json
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [cve-monitoring, generate-single-rule]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cleanup old branches (optional)
        run: |
          echo "Current branches:"
          git branch -a
          echo "Cleanup completed - manual branch management recommended"
